name: Publish Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        type: boolean
        description: "Whether to create a prerelease or proper release"
        default: true
        required: true
      swift_syntax_tag:
        type: string
        default: 601.0.0
        description: "The swift-syntax version to depend on. If this is a prerelease, the latest swift-syntax prerelease tag for this version is used."
        required: true
      swift_format_version:
        type: string
        default: 601.0.0
        description: "The version of swift-format to tag. If this is a prerelease, `-prerelease-<date>` is added to this version."
        required: true

jobs:
  check_triggering_actor:
    name: Check user is allowed to create release
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ "${{ github.triggering_actor }}" != "ahoppen" ]]; then
            echo "${{ github.triggering_actor }} is not allowed to create a release"
            exit 1
          fi
  define_tags:
    name: Determine dependent swift-syntax version and prerelease date
    runs-on: ubuntu-latest
    outputs:
      swift_syntax_tag: ${{ steps.swift_syntax_tag.outputs.swift_syntax_tag }}
      swift_format_version: ${{ steps.swift_format_version.outputs.swift_format_version }}
    steps:
    - name: Determine swift-syntax tag to depend on
      id: swift_syntax_tag
      shell: bash
      run: |
        if [[ "${{ github.event.inputs.prerelease }}" == "false" ]]; then
          echo "swift_syntax_tag=${{ github.event.inputs.swift_syntax_tag }}" >> "$GITHUB_OUTPUT"
          exit
        fi

        git clone https://github.com/swiftlang/swift-syntax.git
        cd swift-syntax
        SWIFT_SYNTAX_TAG_NAME=$(git tag | grep ${{ github.event.inputs.swift_syntax_tag }}-prerelease | sort -r | head -1)

        echo "swift_syntax_tag=$SWIFT_SYNTAX_TAG_NAME" >> "$GITHUB_OUTPUT"
    - name: Determine swift-format prerelease version
      id: swift_format_version
      run: |
        if [[ "${{ github.event.inputs.prerelease }}" == "false" ]]; then
          echo "swift_format_version=${{ github.event.inputs.swift_format_version }}" >> "$GITHUB_OUTPUT"
          exit
        fi
        echo "swift_format_version=${{ github.event.inputs.swift_format_version }}-prerelease-$(date +'%Y-%m-%d_%H-%M-%S')" >> "$GITHUB_OUTPUT"
  # test_debug:
  #   name: Test in Release configuration
  #   uses: swiftlang/github-workflows/.github/workflows/swift_package_test.yml@main
  #   needs: define_tags
  #   with:
  #     exclude_swift_versions: '[{"swift_version": "5.8"}, {"swift_version": "5.9"}, {"swift_version": "5.10"}, {"swift_version": "nightly-6.0"}, {"swift_version": "nightly-main"}]'
  #     pre_build_command: bash .github/workflows/create-release-commits.sh '${{ needs.define_tags.outputs.swift_syntax_tag }}' '${{ needs.define_tags.outputs.swift_format_version }}'
  create_tag:
    name: Create Tag
    runs-on: ubuntu-latest
    # needs: [define_tags, test_debug, check_triggering_actor]
    needs: [define_tags, check_triggering_actor]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Create release commits
      run: bash .github/workflows/create-release-commits.sh '${{ needs.define_tags.outputs.swift_syntax_tag }}' '${{ needs.define_tags.outputs.swift_format_version }}'
    - name: Tag release
      run: |
        git tag "${{ needs.define_tags.outputs.swift_format_version }}"
        git push origin "${{ needs.define_tags.outputs.swift_format_version }}"
    - name: Create release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [[ "${{ github.event.inputs.prerelease }}" != "true" ]]; then
          # Only create a release automatically for prereleases. For real releases, release notes should be crafted by hand.
          exit
        fi
        gh release create "${{ needs.define_tags.outputs.swift_format_version }}" \
          --title "${{ needs.define_tags.outputs.swift_format_version }}"
          --prerelease

